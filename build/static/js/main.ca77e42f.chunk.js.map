{"version":3,"sources":["services/dbCommunication.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","DisplayPhoneBook","persons","substr","setPersons","useState","msg","setMsg","filteredPhoneBook","filter","person","name","toLowerCase","includes","handleOnClickDelete","event","preventDefault","selectedPersonName","find","p","target","value","window","confirm","dbCommunication","setTimeout","catch","err","message","map","number","onClick","Notificaiton","className","AddNewPerson","newName","newNumber","setNewName","setNewNumber","setMessage","type","some","personSoughtAfter","updatedPersonObject","returnedPerson","personObject","array","sortedArray","slice","sort","a","b","previousId","element","findNextId","concat","App","str","setStr","useEffect","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca77e42f.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nconst baseUrl = '/api/persons' // 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, remove, update}","import React, { useState, useEffect } from 'react'\nimport dbCommunication from './services/dbCommunication'\n\nconst DisplayPhoneBook = ({persons, substr, setPersons}) => {\n  if (!persons)\n    return ''\n\n  const [ msg, setMsg ] = useState(null)\n  \n  const filteredPhoneBook = persons.filter(person => person.name.toLowerCase().includes(substr.toLowerCase()))\n\n  const handleOnClickDelete = event => {\n    event.preventDefault()\n\n    const selectedPersonName = persons.find(p => p.id == event.target.value).name\n\n    if (window.confirm(`Delete ${selectedPersonName}`)) {\n      dbCommunication\n      .remove(event.target.value)\n      .then(() => {\n        setPersons(persons.filter(p => p.id != event.target.value))\n        setMsg(`${selectedPersonName} deleted from phonebook`)\n        setTimeout(() => {\n          setMsg(null)\n        }, 5000);\n      })\n      .catch(err => {\n        setMsg(`Information of ${selectedPersonName} has already been removed from server`)\n        setTimeout(() => {\n          setMsg(null)\n        }, 5000);\n      })\n    }\n  }\n\n  return (\n    <div>\n      <Notificaiton message={msg} />\n      {filteredPhoneBook\n      .map(person => (\n          <p key={person.id}>\n            {person.name} {person.number} \n            <button key={person.id} value={person.id} onClick={handleOnClickDelete}> \n              delete \n            </button>\n          </p>\n        )\n      )}\n    </div>\n  )\n\n}\n\nconst Notificaiton = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n      <p className=\"notification\"> {message} </p>\n  )\n}\n\nconst AddNewPerson = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber }) => {\n\n  const [message, setMessage] = useState(null)\n\n  const handleOnClick = (event) => {\n    event.preventDefault()\n\n    // If person exists already in the PhoneBook\n    if (persons.some( person => person.name.toLowerCase() === newName.toLowerCase())) {\n\n      // Ask if the user wants to updpate existing nubmer with new one.\n      if (window.confirm(`${newName} is already added to phonebook. Replace the old number with new one?`)) {\n        \n        //find the person object form persons list by name\n        const personSoughtAfter = persons.find(person => person.name.toLowerCase() == newName.toLowerCase())\n\n        //update the selected personÂ´s number\n        const updatedPersonObject = {...personSoughtAfter, number: newNumber }\n\n        dbCommunication\n          .update(updatedPersonObject.id, updatedPersonObject)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.name.toLowerCase() != newName.toLowerCase() ? person : returnedPerson))\n            setMessage(`${returnedPerson.name} number updated`)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000);\n            return (\n                <Notificaiton message={message} />\n            )\n          })\n      }\n    } \n    else \n    {\n      // Add new Person on the PhoneBook with unique id\n\n      // Function to find the smallest unique id of given list of objects\n      function findNextId(array) {\n        const sortedArray = array\n          .slice()\n          .sort((a,b) => a.id - b.id)\n        let previousId = 0;\n        for (let element of sortedArray) {\n          element.id != (previousId + 1) ?// found gap in ids?\n          previousId + 1 // True: returns the smallest id gap\n          : previousId = element.id // False: update previousId and continue the loop\n        }\n        return previousId + 1 //no gaps found, return next available id (length of the list)\n      }\n\n      const personObject = {\n        name: newName,\n        number: newNumber,\n        id: findNextId(persons)\n      }\n\n      dbCommunication\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        setMessage(`Added ${returnedPerson.name}`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 4000);\n      })\n    }\n    \n  } // handleOnClick\n\n  return (\n    <div> \n      <button type=\"submit\" onClick={handleOnClick}>add</button>\n      <Notificaiton message={message} />\n    </div>\n  )\n} // AddNewPerson\n\nconst App = () => {\n  \n  const [ persons, setPersons ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newName, setNewName ] = useState('')\n  const [ str, setStr] =useState('')\n\n  useEffect(() => {\n    dbCommunication.getAll()\n    .then(response => setPersons(response))\n  }, [])\n\n  const handleChangeName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleChangeNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleChangeStr = (event) => {\n    setStr(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <form>\n        <div> filter shown with <input value={str} onChange={handleChangeStr} /> </div>\n\n        <h2> Add new </h2>\n        <div> name: <input value={newName} onChange={handleChangeName} /> </div>\n        <div> number: <input value={newNumber} onChange={handleChangeNumber}/> </div>\n        <AddNewPerson \n          persons={persons} \n          newName={newName} \n          newNumber={newNumber} \n          setPersons={setPersons} \n          setNewName={setNewName}\n          setNewNumber={setNewNumber}/>\n      </form>\n      <h2>Numbers</h2>\n      <DisplayPhoneBook \n        persons={persons} \n        substr={str} \n        setPersons={setPersons}/>\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}